<canvas width="100%" height="100%" debug="true">
    
    <script src="json.js"/>
    
    <!-- initialize the starting game -->
    <script>
        //please note the board is stored [z][y][x] (board, col, row)
        //and moves are specified (x, y, z)
        canvas.default_game_data = [ 
            [ 
                [0,0,0], [0,0,0], [0,0,0] 
            ], 
            [
                [0,0,0], [0,0,0], [0,0,0] 
            ], 
            [ 
                [0,0,0], [0,0,0], [0,0,0] 
            ] 
        ];
    </script>
    
    <class name="senddata" extends="dataset" type="http" request="false">
        <!-- when data is sent turn on the data icon and save the response before requesting data -->
        <method name="send" args="obj, delegate, funcname">
            if(!obj) obj = new Object();
            this.setQueryString(null);
            this.setQueryString(obj);
            this.response = delegate ? new lz.Delegate(delegate, funcname) : false;
            this.doRequest();
        </method>
    </class>

    <!-- convenience class to make a full sized view -->
    <class name="fullview" width="100%" height="100%"/>
    
    <!-- a single cell of the 3D tic tac toe game -->
    <class name="cell" width="50" height="50" bgcolor="0xccccdd">
    
        <!-- make a move -->
        <handler name="onmouseup">
            parent.parent.parent.makeMove(this.getXYZ())
        </handler>
        
        <!-- highlite for cell -->
        <handler name="onmouseover">
            this.setAttribute('bgcolor', 0xddddff);
        </handler>
        
        <!-- unhighlite for cell -->
        <handler name="onmouseout">
            this.setAttribute('bgcolor', 0xccccdd);
        </handler>
        
        <!-- get the X, Y, Z of this cell, knowing we have a X, Y, Z structure -->
        <method name="getXYZ">
            var x = parent.subviews.indexOf(this);
            var y = parent.parent.subviews.indexOf(parent);
            var z = parent.parent.parent.subviews.indexOf(parent.parent);
            return [x, y, z];
        </method>
        
        <!-- mark the cell as an X -->
        <method name="markX">
            this.label.setAttribute('text', "X");
        </method>
        
        <!-- mark the cell as an O -->
        <method name="markO">
            this.label.setAttribute('text', "O");
        </method>
        
        <text name="label" align="center" valign="middle"/>
    </class>
    
    <!-- one board of the 3D tic tac toe game -->
    <class name="board">
        <simplelayout axis="y" spacing="1"/>
        <view>
            <simplelayout axis="x" spacing="1"/>
            <cell/>
            <cell/>
            <cell/>
        </view>
        <view>
            <simplelayout axis="x" spacing="1"/>
            <cell/>
            <cell/>
            <cell/>
        </view>
        <view>
            <simplelayout axis="x" spacing="1"/>
            <cell/>
            <cell/>
            <cell/>
        </view>
    </class>
    
    <!-- Three boards making the whole 3D tic tac toe game -->
    <class name="game">
        
        <senddata name="gameserver" src="http://127.0.0.1:2020">
            <handler name="ondata">
                Debug.write('data received', this);
                var dp = this.getPointer();
                var jsontext = dp.xpathQuery('data/text()');
                Debug.write("jsontext", jsontext);
            </handler>
        </senddata>
        
        <!-- on start initialize a new game -->
        <handler name="oninit">
            this.gamedata = canvas.default_game_data;
        </handler>
        
        <!-- when a subcell reports a move made it calls this -->
        <method name="makeMove" args="move">
            //only move if the space is empty.
            if(this.gamedata[move[2]][move[1]][move[0]] != 0)
                return;
                
            //set the space in the gamedata according to move
            this.gamedata[move[2]][move[1]][move[0]] = -1;
            
            var cell = this.subviews[move[2]].subviews[move[1]].subviews[move[0]];
            cell.markX();
            
            //send the gamedata as JSON back to the server
            var obj = Object();
            obj.game = JSON.stringify(this.gamedata);
            this.gameserver.send(obj, null, null);
        </method>
        
        <!-- this is the view hierarchy of the board in question -->
        <simplelayout axis="y" spacing="5"/>
        <board/>
        <board/>
        <board/>
    </class>
    
    <handler name="oninit">
        this.gameboard.animate('opacity', 1, 7000);
    </handler>
    
    <!-- Game Text -->
        
    <text text="Client-Server 3D Tic Tac Toe By James Robey" align="center" y="${canvas.gameboard.y-30}"/>    
    
    <!-- The Game Board -->
    
    <game opacity="0" name="gameboard" valign="middle" align="center"/>
        
</canvas>