Michael Matthews -- Tic Tac Toe Submission

Dear Hiring Manager,

A README definitely makes the best cover letter. :-)

Thank you very much for your time in evaluating my project.  Below I have included some feature explanations, some performance analysis, and a list of features that I am still working on to round out the edges of the page.  Again, thank you for your time!

~Michael Matthews

Tested on:
- Firefox 3.6: works
- Firefox 4: works
- Safari 5: works BEST (animations)
- Mobile Safari (iPhone/iPad): works BEST (animations)
- Google Chrome: works BEST (animations)
- Android mobile: works BEST (animations)
- IE 9: works
- IE 6: does not work

For better or worse, right now the site is "optimized" for mobile browsers.  It looks decent in a desktop browser, but the controls are only reasonable for mobiles.  Please see the TODO list for more mobile optimizations to come, and one desktop TODO.

Additionally, the Tic Tac Toe game itself is actually persisted in a database between calls, as are the "Players" that "login."  This was intended to eventually support a two-player game, which I thought would be a good extra credit feature.  I've since taken it the mobile route, and am adding features there, but I will try the two player system later anyway.  "Players" do not have a password because I thought that would be tedious to evaluate, and the Django admin page is left off, because there isn't really much to administer.

For the game itself, I went with an array of integers to represent the game board.  I felt like this was unique, and would allow for speedier algorithm execution, and potentially more compact, though probably more obscure, code.  For example, a quick performance test suggests that finding a potential winning Tic Tac Toe position like this:
  t = [1,1,0]   # where 1 is 'x', and 0 is the empty spot that gets the win
  if(sum(t) == 2)
	# insert 1 where the 0 is found

Éis quicker than testing like this:
 t = ['x', 'x', None]
 if(t == ['x', 'x', None] or t == [None, 'x', 'x'] or t == ['x', None, 'x'])
	# insert 'x' where None is found

The first example seems more compact, as well.  There is probably a better solution than either of these, but I was happy with how it worked out.  See below for a real performance test that I did.

TODO:
- Still need slightly better looking win/loss/draw game ending dialog
- iPhone "Add to home screen" special functionality (including Google's open sourced mobile bookmark bubble)
- Better colors (FYI, if it wasn't obvious, I did steal Cox Media's main page background, and I had a blue color scheme that I thought was pretty good, but I thought better of checking in an exact copy of the background.  So I changed the site colors, and now I'm not too happy with them).
- Work on two-player system.  Will likely require:
	- Turn timer to prevent stalling, and allow AJAX syncing
	- Persist a list of logged in players.
	- Probably require unique player names.  Will try to avoid passwords, though.
	- A way to clear out a player once they've timed out.
	- AJAX timer to check for game requests from a different player, plus a heartbeat
	- TODO: add to this listÉ

EXTRA:
The quick comparison tests that I ran to find a potential tictactoe win:
i = 100000
L = [['x','x',None],[None,'x', 'x'],['x','o',None],['o','o', None]] # winnable permutations
wins = 0
while i:                                                            # find a win
    for l in L:
        if l == ['x','x',None] or l == [None,'x','x'] or l == ['x',None,'x']:
            wins += 1
    i -= 1
print wins

> time python chars.py 
200000
real	0m0.276s
user	0m0.265s
sys	0m0.010s

L = [[1,1,0],[0,1,1],[1,0,0],[0,0,1]] # winnable permutations
wins = 0
while i:			      # find a win
    for l in L:
        if sum(l) == 2:
            wins += 1
    i -= 1
print wins

> time python nums.py 
200000
real	0m0.185s
user	0m0.173s
sys	0m0.010s

It appears that the number system is faster than the crude character win test here.

Intructions:
1. Fork this repo on github.
2. Create an app that can interactively play the game of Tic Tac Toe against another player and never lose.
3. Commit early and often, with good messages.
4. Push your code back to github and send me a pull request.
