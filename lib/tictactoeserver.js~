

var assert = require('assert');

/**
 * @desc Define a function that takes a board state as input and decides
 *    whether a player has one.
 * INPUT:
 *   boardState: 2-dimensional array
 * OUTPUT:
 *   {
 *      gameOver: false or true,
 *      player: blank or X or O 
 *   }
 */
//function isGameOver(x) {
exports.isGameOver = function (x) {
  var playerWinner = '';
  var result = {};
  result['gameOver'] = false;
  //result["player"] = 'X';
  if ((playerWinner != '') == (x[0][0] == x[1][1]) && (x[1][1] == x[2][2])) {
    result['gameOver'] = true;
    playerWinner = x[0][0];
  }
  result['player'] = playerWinner;
  return result;
}



/**
 * @param {Array} x Current tic-tac-toe board state.
 * @desc Given a board state, get the machine player's next move. THe algorithm is that of a perfect player as described in the wiki article.
 * @output JSON nextMove {moveLocation:[], playerSymbol:'X'}
 */
function getMPNextMove(x) {
  var nextMove = {}
  nextMove['moveLocation'] = [0,0];
  nextMove['playerSymbol'] = 'X';
  return nextMove;
}

/**
 * param Array x
 * @desc Given a current board state, update it using nextMove. Return the updated board.
 */
function updateBoard(x, nextMove) {
  var mLoc = nextMove['moveLocation'];
  var pSymbol = nextMove['playerSymbol'];
  x[mLoc[0]][mLoc[1]] = pSymbol;
  return x;
}

// Get an intial board.
//var x = getBoardStateSample();
var x = {};
console.log(x);

// Check whether a player won or draw.
//var result = isGameOver(x);
//var result = {};
//console.log(result);

// Get next move.
//var nextMove = getMPNextMove(x);
//console.log(nextMove);

// Update the board with the move:
//x = updateBoard(x, nextMove);
//console.log(x);


